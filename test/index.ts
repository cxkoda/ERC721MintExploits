import { expect } from "chai";
import { ethers } from "hardhat";

async function setup(exploiterName: string) {
  const MockToken = await ethers.getContractFactory("MockToken");
  const token = await MockToken.deploy();
  await token.deployed();

  const Exploiter = await ethers.getContractFactory(exploiterName);
  const exploiter = await Exploiter.deploy();
  await exploiter.deployed();

  return { token, exploiter };
}

function testExploiter(exploiterName: string) {
  context(exploiterName, function () {
    it("should allow exploiter to mint one", async function () {
      const { token, exploiter } = await setup(exploiterName);
      await expect(exploiter.run(token.address, 1)).to.not.be.reverted;
    });

    it("should revert if exploiter tries to mint multiple in one tx", async function () {
      const { token, exploiter } = await setup(exploiterName);
      await expect(exploiter.run(token.address, 2)).to.be.reverted;
    });
  });
}

describe("NFT Mint Exploits", function () {
  testExploiter("ReentrancyExploiter");
  testExploiter("LoopMintExploiter");
  testExploiter("DeployMintExploiter");
});
